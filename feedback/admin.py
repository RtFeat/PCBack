# feedback/admin.py
from django.contrib import admin
from django.utils.html import format_html
from django.utils.safestring import mark_safe
from django.urls import reverse
from django.utils import timezone
from datetime import timedelta
from django.db.models import Q
from django.http import HttpResponse
import csv
from .models import Feedback


@admin.register(Feedback)
class FeedbackAdmin(admin.ModelAdmin):
    """–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—è–≤–æ–∫ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–∫–µ
    list_display = [
        'id',
        'colored_status',
        'actor_display',
        'name_person',
        'email',
        'theme_short',
        'message_short',
        'created_at_display',
        'days_since_creation',
    ]
    
    # –§–∏–ª—å—Ç—Ä—ã –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
    list_filter = [
        'status',
        'actor',
        ('created_at', admin.DateFieldListFilter),
        'updated_at',
    ]
    
    # –ü–æ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞
    search_fields = [
        'email',
        'name_person',
        'name_company',
        'theme',
        'message',
        'ip_address',
    ]
    
    # –ü–æ–ª—è —Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è
    readonly_fields = [
        'created_at',
        'updated_at',
        'ip_address',
        'user_agent',
        'id',
        'colored_status_detail',
        'days_since_creation',
    ]
    
    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ–ª–µ–π –≤ —Ñ–æ—Ä–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    fieldsets = (
        ('–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': (
                'id',
                'colored_status_detail',
                'status',
                'actor',
                'theme',
            )
        }),
        ('–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ', {
            'fields': (
                'name_person',
                'name_company',
                'email',
            )
        }),
        ('–°–æ–æ–±—â–µ–Ω–∏–µ', {
            'fields': (
                'message',
            )
        }),
        ('–°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': (
                'created_at',
                'updated_at',
                'days_since_creation',
                'ip_address',
                'user_agent',
            ),
            'classes': ('collapse',),
        }),
    )
    
    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    ordering = ['-created_at']
    
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    list_per_page = 25
    
    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è –≤ –≤–µ—Ä—Ö–Ω–µ–π —á–∞—Å—Ç–∏
    list_select_related = True
    
    # –î–µ–π—Å—Ç–≤–∏—è –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
    actions = [
        'mark_as_completed',
        'mark_as_rejected', 
        'mark_as_new',
        'export_as_csv',
    ]
    
    def colored_status(self, obj):
        """–¶–≤–µ—Ç–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤ —Å–ø–∏—Å–∫–µ"""
        color = obj.get_status_color()
        return format_html(
            '<span style="background-color: {}; color: white; padding: 3px 8px; '
            'border-radius: 3px; font-size: 12px; font-weight: bold;">{}</span>',
            color,
            obj.get_status_display()
        )
    colored_status.short_description = '–°—Ç–∞—Ç—É—Å'
    colored_status.admin_order_field = 'status'
    
    def colored_status_detail(self, obj):
        """–¶–≤–µ—Ç–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Ñ–æ—Ä–º–µ"""
        color = obj.get_status_color()
        return format_html(
            '<div style="background-color: {}; color: white; padding: 10px; '
            'border-radius: 5px; text-align: center; font-weight: bold; '
            'font-size: 14px; max-width: 200px;">{}</div>',
            color,
            obj.get_status_display()
        )
    colored_status_detail.short_description = '–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å'
    
    def actor_display(self, obj):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–æ–ª–∏ —Å –∏–∫–æ–Ω–∫–æ–π"""
        icons = {
            'advertiser': 'üìà',
            'author': '‚úçÔ∏è',
            'question': '‚ùì',
        }
        icon = icons.get(obj.actor, 'üë§')
        return f"{icon} {obj.get_actor_display()}"
    actor_display.short_description = '–†–æ–ª—å'
    actor_display.admin_order_field = 'actor'
    
    def theme_short(self, obj):
        """–ö–æ—Ä–æ—Ç–∫–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–º—ã"""
        if len(obj.theme) > 40:
            return f"{obj.theme[:40]}..."
        return obj.theme
    theme_short.short_description = '–¢–µ–º–∞'
    theme_short.admin_order_field = 'theme'
    
    def message_short(self, obj):
        """–ö–æ—Ä–æ—Ç–∫–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        # –£–±–∏—Ä–∞–µ–º HTML —Ç–µ–≥–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        import re
        clean_message = re.sub('<.*?>', '', obj.message)
        if len(clean_message) > 50:
            return f"{clean_message[:50]}..."
        return clean_message
    message_short.short_description = '–°–æ–æ–±—â–µ–Ω–∏–µ'
    
    def created_at_display(self, obj):
        """–ö—Ä–∞—Å–∏–≤–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞—Ç—ã —Å–æ–∑–¥–∞–Ω–∏—è"""
        return obj.created_at.strftime('%d.%m.%Y %H:%M')
    created_at_display.short_description = '–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è'
    created_at_display.admin_order_field = 'created_at'
    
    def days_since_creation(self, obj):
        """–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π —Å –º–æ–º–µ–Ω—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è"""
        delta = timezone.now() - obj.created_at
        days = delta.days
        
        if days == 0:
            return "–°–µ–≥–æ–¥–Ω—è"
        elif days == 1:
            return "1 –¥–µ–Ω—å –Ω–∞–∑–∞–¥"
        elif days < 7:
            return f"{days} –¥–Ω–µ–π –Ω–∞–∑–∞–¥"
        elif days < 30:
            weeks = days // 7
            return f"{weeks} –Ω–µ–¥–µ–ª—å –Ω–∞–∑–∞–¥"
        else:
            months = days // 30
            return f"{months} –º–µ—Å—è—Ü–µ–≤ –Ω–∞–∑–∞–¥"
    days_since_creation.short_description = '–î–∞–≤–Ω–æ—Å—Ç—å'
    
    # –î–µ–π—Å—Ç–≤–∏—è –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤
    def mark_as_completed(self, request, queryset):
        """–û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ"""
        count = queryset.update(status='completed')
        self.message_user(
            request, 
            f'{count} –∑–∞—è–≤–æ–∫ –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ.'
        )
    mark_as_completed.short_description = "–û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ"
    
    def mark_as_rejected(self, request, queryset):
        """–û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω–æ–µ"""
        count = queryset.update(status='rejected')
        self.message_user(
            request, 
            f'{count} –∑–∞—è–≤–æ–∫ –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ.'
        )
    mark_as_rejected.short_description = "–û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ"
    
    def mark_as_new(self, request, queryset):
        """–û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –Ω–æ–≤–æ–µ"""
        count = queryset.update(status='new')
        self.message_user(
            request, 
            f'{count} –∑–∞—è–≤–æ–∫ –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –Ω–æ–≤—ã–µ.'
        )
    mark_as_new.short_description = "–û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –Ω–æ–≤—ã–µ"
    
    def export_as_csv(self, request, queryset):
        """–≠–∫—Å–ø–æ—Ä—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –≤ CSV"""
        response = HttpResponse(content_type='text/csv; charset=utf-8')
        response['Content-Disposition'] = 'attachment; filename="feedback_export.csv"'
        
        # –î–æ–±–∞–≤–ª—è–µ–º BOM –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Excel
        response.write('\ufeff')
        
        writer = csv.writer(response)
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏
        writer.writerow([
            'ID',
            '–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è',
            '–†–æ–ª—å',
            '–°—Ç–∞—Ç—É—Å',
            '–ò–º—è',
            '–ö–æ–º–ø–∞–Ω–∏—è',
            'Email',
            '–¢–µ–º–∞',
            '–°–æ–æ–±—â–µ–Ω–∏–µ',
            'IP –∞–¥—Ä–µ—Å',
        ])
        
        # –î–∞–Ω–Ω—ã–µ
        for obj in queryset:
            writer.writerow([
                obj.id,
                obj.created_at.strftime('%d.%m.%Y %H:%M'),
                obj.get_actor_display(),
                obj.get_status_display(),
                obj.name_person,
                obj.name_company or '',
                obj.email,
                obj.theme,
                obj.message.replace('\n', ' ').replace('\r', ''),
                obj.ip_address or '',
            ])
        
        return response
    export_as_csv.short_description = "–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ CSV"
    
    def get_queryset(self, request):
        """–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤"""
        return super().get_queryset(request).select_related()
    
    def has_delete_permission(self, request, obj=None):
        """–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ - —Ç–æ–ª—å–∫–æ –¥–ª—è —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        return request.user.is_superuser
    
    def get_readonly_fields(self, request, obj=None):
        """–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ readonly –ø–æ–ª—è"""
        readonly = list(self.readonly_fields)
        
        # –û–±—ã—á–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏–∑–º–µ–Ω—è—Ç—å —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ç—É—Å
        if not request.user.is_superuser and obj:
            readonly.extend([
                'actor', 'theme', 'email', 'name_company', 
                'name_person', 'message'
            ])
        
        return readonly


# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ –∞–¥–º–∏–Ω–∫–µ
class FeedbackStatsMixin:
    """–ú–∏–∫—Å–∏–Ω –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    
    def changelist_view(self, request, extra_context=None):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ —Å–ø–∏—Å–æ–∫"""
        extra_context = extra_context or {}
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_count = Feedback.objects.count()
        new_count = Feedback.objects.filter(status='new').count()
        completed_count = Feedback.objects.filter(status='completed').count()
        rejected_count = Feedback.objects.filter(status='rejected').count()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–Ω–∏
        today = timezone.now().date()
        week_ago = today - timedelta(days=7)
        month_ago = today - timedelta(days=30)
        
        today_count = Feedback.objects.filter(
            created_at__date=today
        ).count()
        
        week_count = Feedback.objects.filter(
            created_at__date__gte=week_ago
        ).count()
        
        month_count = Feedback.objects.filter(
            created_at__date__gte=month_ago
        ).count()
        
        extra_context.update({
            'feedback_stats': {
                'total': total_count,
                'new': new_count,
                'completed': completed_count,
                'rejected': rejected_count,
                'today': today_count,
                'week': week_count,
                'month': month_count,
            }
        })
        
        return super().changelist_view(request, extra_context)


# –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–∫—Å–∏–Ω –∫ –Ω–∞—à–µ–º—É –∞–¥–º–∏–Ω-–∫–ª–∞—Å—Å—É
FeedbackAdmin.__bases__ = (FeedbackStatsMixin,) + FeedbackAdmin.__bases__